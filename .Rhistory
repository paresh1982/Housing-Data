sum(batting_left[batting_left$playerID == "bondsba01", 12])
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
batting_left[batting_left$nameFirst == "Barry",]
batting_left <- left_join(Batting, Master, by = "playerID")
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
batting_left %>% group_by(playerID) %>%summarise(HR_total = sum(HR))
batting_left %>% group_by(playerID) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
batting_left %>% group_by(playerID, nameFirst) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
head(HR_summary, 20)
data("Pitching")
head(Pitching)
dim(Pitching)
dim(Master)
pitching_left <- left_join(Pitching, Master, by = "playerID")
head(pitching_left)
length(unique(Pitching$playerID))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst)
%>%summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
Pitch_summary
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
data("AwardsPlayers")
AwardsPlayers %>% filter(awardID == "World Series MVP")
dim(AwardsPlayers %>% filter(awardID == "World Series MVP"))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(awardID))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID")
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate)
?year
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
data(Master)
data("Batting")
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[Master$nameFirst == "Barry",]
# Find player ID for "Barry Bonds"
Master[Master$nameFirst == "Barry" & Master$nameLast = "Bonds",]
Master[(Master$nameFirst == "Barry" & Master$nameLast = "Bonds"),]
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst)
%>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Yes Manny is in top 20,  at 15th position with 555 home run score
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
# Every Pitcher in the baseball history who has accumulated at least 300 wins (W) and
#at least 3,000 strikeouts (SO)
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
# Table with 10 most recent World Series MVP awardees. Include their names and ages
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate)
%>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Yes Manny is in top 20,  at 15th position with 555 home run score
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
# Every Pitcher in the baseball history who has accumulated at least 300 wins (W) and
#at least 3,000 strikeouts (SO)
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
# Table with 10 most recent World Series MVP awardees. Include their names and ages
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
model <- xgb.train(params = list(booster = "gbtree",
eta = 0.01,
max_depth = max.depth,
min_child_weight = min_child_weight,
subsample = subsample,
colsample_bytree = colsample,
objective = "binary:logistic",
eval_metric = "auc"),
data = dtrain,
nround = optimal_round,
maximize = TRUE,
lambda = lambda,
gamma = gamma,
alpha = alpha,
nthread = 10,
verbose = TRUE,
tree_method = 'auto'
)
install.packages("rvest")
library(rvest)
site <- html("https://campus.datacamp.com/courses/machine-learning-with-the-experts-school-budgets/exploring-the-raw-data?ex=6")
DC <- site %>% html_nodes(".exercise--typography") %>% html_text()
DC
sol <- site %>% html_nodes(".lm_items") %>% html_text()
sol
sol <- site %>% html_nodes(xpath = "//*[contains(concat( " ", @class, " " ), concat( " ", "lm_items", " " ))]") %>% html_text()
sol <- site %>% html_nodes(xpath = "//*[contains(concat( " ", @class, " " ), concat( " ", "lm_items", " " ))]")
site %>% html_nodes(".div.ace_content") %>% html_text()
site %>% html_nodes(xpath = "//*[contains(concat( " ", @class, " " ), concat( " ", "lm_items", " " ))]")
site %>% html_nodes(".ace_content") %>% html_text()
site <- html("https://campus.datacamp.com/courses/machine-learning-with-the-experts-school-budgets/exploring-the-raw-data?ex=6")
library("rvest", lib.loc="~/R/win-library/3.3")
site <- html("https://campus.datacamp.com/courses/machine-learning-with-the-experts-school-budgets/exploring-the-raw-data?ex=6")
DC <- site %>% html_nodes(".exercise--typography") %>% html_text()
DC
site <- read_html("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=3")
sol <- site %>% html_nodes(".ace_content") %>% html_text()
sol
sol <- site %>% html_nodes(".div_class") %>% html_text()
DC <- site %>% html_nodes(".exercise--typography") %>% html_text()
DC
for (i = 1:19) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
for i = 1:19 {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
page <- C(1 : 19)
page <- c(1 : 19)
page
for (i in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
page <- c(3, 5:8, 10:15, 18, 19)
for (i in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
page
for (page[i] in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
for (page[i] in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[i] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
for (page[i] in seq_along(page)) {
site[[i]] <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
length(page)
pages <- data.frame(link = rep("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",13), p = page))
pages <- data.frame(link = rep("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",13), p = page)
pages
data.frame(cat(link, p))
data.frame(cat(pages$link, pages$p))
pages <- cat(pages$link, pages$p)
pages$link
pages
pages <- data.frame(link = rep("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",13), p = page)
pages$link
cat(pages$link, pages$p)
paste(pages$link, pages$p)
library("purrr", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
pages_1 <- paste(pages$link, pages$p)
pages_1
DC <- pages_1 %>% map(read_html()) %>% map(html_nodes(".exercise--typography")) %>% html_text()
site <- map(pages_1, read_html)
site
DC <- site %>% map(html_nodes(".exercise--typography")) %>% map(html_text)
DC <- site %>% map(html_nodes(".exercise--typography"))
DC <- site %>% html_nodes(".exercise--typography")
site <- map_chr(pages_1, read_html)
site <- map(pages_1, read_html)
summary(site)
site1 <- unlist(site)
site1
summary(site1)
site1 %>% html_nodes(".exercise--typography")
site <- map(pages_1, read_html)
DC <- site %>% html_nodes(".exercise--assignment")
sit <- read_html("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=3")
sit
DC <- sit %>% html_nodes(".exercise--typography") %>% html_text()
DC
length(pages_1)
for (i in site){
DC <- site %>% html_nodes(".exercise--assignment") %>% html_text()
DC
}
for (i in site){
DC <- i %>% html_nodes(".exercise--assignment") %>% html_text()
DC
}
DC
for (i in seq_along(site)){
DC[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
}
DC
for (i in seq_along(site)){
DC[[i]] <- site[[i]] %>% html_nodes(".exercise--typography") %>% html_text()
}
for (i in seq_along(site)){
DC[[i]][[1]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC[[i]][[2]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
}
for (i in seq_along(site)){
DC[[i]][1] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC[[i]][2] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
}
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]], /n)
print(DC_in[[i]],/n)
}
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
print(DC_in[[i]])
}
DC_a <- list[]
DC_in <- list[]
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
print(DC_in[[i]])
}
DC_a <- list[c()]
DC_in <- list[c()]
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
#print(DC_a[[i]])
#print(DC_in[[i]])
}
DC_a <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
DC_in <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
#print(DC_a[[i]])
#print(DC_in[[i]])
}
DC_a <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
DC_in <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
print(DC_in[[i]])
}
DC_a <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
DC_in <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
cat("\n")
print(DC_in[[i]])
cat("\n")
cat("\n")
cat("\n")
}
DC_a[[1]]
data.table(a = c(1L, 2L), b = LETTERS[1:4])
install.packages("data.table")
library("data.table", lib.loc="~/R/win-library/3.3")
data.table(a = c(1L, 2L), b = LETTERS[1:4])
DT <- data.table(a = c(1L, 2L), b = LETTERS[1:4])
DT[3]
DT[3]
DT[2:3]
x <- c("red", "green", "green", "red", "red")
table(x)
factor(x)
y <- factor(x)
summary(y)
y
summary(x)
df <- data.frame(
x = c(47, 13, 5, 46),
y = c("A", "B", "C", "D"),
z = c(34, 50, 22, 42)
)
df
idx <- order(
df$x
, decreasing = TRUE)
idx
df[idx, ]
mat_b <- matrix(1:12, nrow = 2, byrow = FALSE)
mat_b
vals <- c("medium", "low", "high", "low")
vals_fct <- factor(vals, levels = c("low", "medium", "high"), ordered = TRUE)
vals_fct[3] < vals_fct[4]
vals
vals_fct
summary(vals_fct)
y <- c(NA, 13, 19, 18)
average <- function(x,
...
) {
mean(x, ...)
}
average(y, na.rm = TRUE)
?round
?labels
getwd()
x <- runif(10)
x
?runif
seq(x)
x <- c()
x
1:length(x)
seq(x)
vector("numeric", 5)
vector("character", 3)
n <- 1e5
n
n-1
x_empty <- c()
system.time(for(i in seq(n)) x_empty <- c(x_empty, i))
x_zeros <- vector("integer", n)
system.time(for(i in seq(n)) x_zeros[i] <- i)
x <- c(1, 2, 12)
any(x > 10)
x <- c(1, 2, 12, 15)
any(x > 10)
all(x > 0)
all(x > 10)
setwd("~/GitHub/case_study")
library(readxl)
library(dplyr)
library(ggplot2)
library(purrr)
library(lubridate)
library(stringr)
library(tidyr)
library(data.table)
dataset_resale <- read_excel("~/GitHub/case_study/Housing_Resale_Data_1.xlsx")
target <- dataset_resale$resale_price
colSums(is.na(dataset_resale))# no nissing values
dataset_resale <- separate(data = dataset_resale, col = month,
into = c("year", "month_num"), sep = "-", remove = FALSE)
flat_cnt_month <- dataset_resale %>%
group_by(month, flat_type) %>% summarise(flat_cnt_month = n())
# Add flat_cnt_month to dataset
dataset_resale <- left_join(dataset_resale, flat_cnt_month, by = c("month", "flat_type"))
flat_cnt_month_lease <- dataset_resale %>%
group_by(month, lease_commence_date, flat_type) %>%
summarise(flat_cnt_month_lease = n())
# Add flat_cnt_month to dataset
dataset_resale <- left_join(dataset_resale, flat_cnt_month_lease,
by = c("month", "lease_commence_date", "flat_type"))
dataset_resale$condition <- rep(0, times = nrow(dataset_resale))
dataset_resale$condition <- ifelse(dataset_resale$lease_commence_date <= 1980, "old", dataset_resale$condition)
dataset_resale$condition <- ifelse(dataset_resale$lease_commence_date > 1980 & dataset_resale$lease_commence_date <= 2000 , "medium", dataset_resale$condition)
dataset_resale$condition <- ifelse(dataset_resale$lease_commence_date > 2000, "new", dataset_resale$condition)
unique(dataset_resale$condition)
glimpse(dataset_resale)
dataset_resale$condition <- as.factor(dataset_resale$condition)
glimpse(dataset_resale)
dataset_resale %>%
filter(lease_commence_date %in% c("1968", "1972") & flat_type == "3 ROOM") %>%
select(lease_commence_date) %>% unique()
terrace <- dataset_resale %>%
filter(lease_commence_date == "1972" & flat_type == "3 ROOM" & flat_model == "Terrace") %>%
select(flat_model, floor_area_sqm)
terrace_1968 <- dataset_resale %>%
filter(lease_commence_date == "1968" & flat_type == "3 ROOM" & flat_model == "Terrace") %>%
select(flat_model, floor_area_sqm)
dataset_resale$floor_area_sqm[dataset_resale$lease_commence_date == "1972" &
dataset_resale$flat_type == "3 ROOM" &
dataset_resale$flat_model == "Terrace"] <- ifelse(dataset_resale$floor_area_sqm[dataset_resale$lease_commence_date == "1972" &
dataset_resale$flat_type == "3 ROOM" &
dataset_resale$flat_model == "Terrace"] >= mean(terrace$floor_area_sqm), median(terrace$floor_area_sqm), dataset_resale$floor_area_sqm[dataset_resale$lease_commence_date == "1972" &
dataset_resale$flat_type == "3 ROOM" &
dataset_resale$flat_model == "Terrace"])
flat_cnt_month_model <- dataset_resale %>%
group_by(month, flat_model) %>% summarise(flat_cnt_month_model = n())
# Add flat_cnt_month to dataset
dataset_resale <- left_join(dataset_resale, flat_cnt_month_model, by = c("month", "flat_model"))
dataset_resale$storey_lower <- as.integer(substr(dataset_resale$storey_range, 2, 3))
dataset_resale$storey_upper <- as.integer(substr(dataset_resale$storey_range, 7, 8))
town_cnt <- dataset_resale %>% group_by(month, town) %>%
summarise(flat_count_town = n())
dataset_resale <- left_join(dataset_resale, town_cnt, by = c("month", "town"))
block <- dataset_resale %>% group_by(month, town, street_name) %>%
summarise(block_count = length(unique(block)))
# Add block count variable to dataset
dataset_resale <- left_join(dataset_resale, block,
by = c("month", "town", "street_name"))
glimpse(dataset_resale)
unique(dataset_resale$block_count)
streets <- dataset_resale %>% group_by(month, town, street_name) %>%
summarise(flat_count_street = n())
dataset_resale <- left_join(dataset_resale, streets,
by = c("month", "town", "street_name"))
dataset_resale$month <- ymd(paste(dataset_resale$month, "-01", sep =""))
elapsed_months <- function(end_date, start_date) {
ed <- as.POSIXlt(end_date)
sd <- as.POSIXlt(start_date)
12 * (ed$year - sd$year) + (ed$mon - sd$mon)
}
dataset_resale$month_lapsed <- elapsed_months(Sys.Date(), dataset_resale$month)
glimpse(dataset_resale)
dataset_resale_1 <- dataset_resale %>%
select(year, month_lapsed, town, flat_type, floor_area_sqm, flat_model,
lease_commence_date, flat_cnt_month, flat_cnt_month_lease,
condition, flat_cnt_month_model, storey_lower, storey_upper,
flat_count_town, flat_count_street, block_count, resale_price)
glimpse(dataset_resale_1)
dataset_resale_1[, c(3, 4, 6, 7, 10, 12, 13)] <- map_df(dataset_resale_1[, c(3, 4, 6, 7, 10, 12, 13)], as.factor)
dataset_resale_1$year <- as.numeric(dataset_resale_1$year)
glimpse(dataset_resale_1)
dataset_resale_1$year <- as.numeric(dataset_resale_1$year)
glimpse(dataset_resale_1)
train <- dataset_resale_1 %>% filter(year %in% c(2000:2015))
test <- dataset_resale_1 %>% filter(year %in% c(2016, 2017))
dim(train)
dim(test)
library(h2o)
localH2O <- h2o.init(nthreads = -1)
train.h2o <- as.h2o(train[, -1])
test.h2o <- as.h2o(test[, -c(1,17)])
colnames(train.h2o)
colnames(test.h2o)
y.dep <- 16
x.indep <- c(1:15)
system.time(
rforest.model <- h2o.randomForest(y=y.dep, x=x.indep, training_frame = train.h2o,
ntrees = 1000, mtries = 3, max_depth = 4, seed = 1122)
)
h2o.performance(rforest.model)
system.time(predict.rforest <- as.data.frame(h2o.predict(rforest.model, test.h2o)))
pred_rf <- predict.rforest$predict
test %>% mutate(residual = resale_price - pred_rf) %>% summarise(rmse = sqrt(mean(residual^2)))
test %>% mutate(resi.sq = (resale_price - pred_rf)^2, tot.sq = (resale_price - mean(resale_price))^2) %>%
summarise(sqr.R = 1-(sum(resi.sq)/sum(tot.sq)))
system.time(
gbm.model <- h2o.gbm(y=y.dep, x=x.indep, training_frame = train.h2o, ntrees = 1000, max_depth = 4, learn_rate = 0.01, seed = 1122)
)
h2o.performance (gbm.model)
predict.gbm <- as.data.frame(h2o.predict(gbm.model, test.h2o))
pred_gbm <- predict.gbm$predict
test %>% mutate(residual = resale_price - pred_gbm) %>% summarise(rmse = sqrt(mean(residual^2)))
test %>% mutate(resi.sq = (resale_price - pred_gbm)^2, tot.sq = (resale_price - mean(resale_price))^2) %>%
summarise(sqr.R = 1-(sum(resi.sq)/sum(tot.sq)))
system.time(
dlearning.model <- h2o.deeplearning(y = y.dep,
x = x.indep,
training_frame = train.h2o,
epoch = 60,
hidden = c(100,100),
activation = "Rectifier",
seed = 1122
)
)
h2o.performance(dlearning.model)
predict.dl2 <- as.data.frame(h2o.predict(dlearning.model, test.h2o))
pred_dl2 <- predict.dl2$predict
test %>% mutate(residual = resale_price - pred_dl2) %>% summarise(rmse = sqrt(mean(residual^2)))
test %>% mutate(resi.sq = (resale_price - pred_dl2)^2, tot.sq = (resale_price - mean(resale_price))^2) %>%
summarise(sqr.R = 1-(sum(resi.sq)/sum(tot.sq)))
caret::RMSE(pred_dl2, test$resale_price)
sort(unique(dataset_resale$lease_commence_date))
